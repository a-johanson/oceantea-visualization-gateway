
<div class="panel panel-default">
	<div class="panel-heading">Add Time Series Data</div>
	<div class="panel-body">
		<div class="container" style="max-width: 750px;">
			<form method="post" action="/upload" enctype="multipart/form-data" role="form" id="formCSVUpload" class="form-horizontal">
				<div class="form-group">
					<label for="inputStation" class="control-label col-xs-3">Station ID</label>
					<div class="col-xs-9">
						<div class="input-group">
							<input type="text" class="form-control" id="inputStation" name="station" placeholder="Only letters from the English alphabet, Arabic numerals, and dashes">
							<div class="input-group-btn">
								<button type="button" id="stationSelectMenuButton" class="btn btn-default dropdown-toggle" data-toggle="dropdown"><span class="fa fa-caret-down"></span></button>
								<ul id="stationSelectMenu" class="dropdown-menu dropdown-menu-right" role="menu">
								</ul>
							</div>
						</div>
						<p class="help-block">
							If the station is already registered, region name, device ID, latitude, and longitude are ignored; you can leave the corresponding fields blank in this case.
						</p>
					</div>
				</div>
				<div class="form-group">
					<label for="inputRegion" class="control-label col-xs-3">Region Name</label>
					<div class="col-xs-9">
						<input type="text" class="form-control" id="inputRegion" name="region" placeholder="e.g., Northern Norway; only letters from the English alphabet and spaces">
					</div>
				</div>
				<div class="form-group">
					<label for="inputDevice" class="control-label col-xs-3">Device ID</label>
					<div class="col-xs-9">
						<input type="text" class="form-control" id="inputDevice" name="device" placeholder="e.g., MLM; only letters from the English alphabet, Arabic numerals, and dashes">
					</div>
				</div>
				<div class="form-group">
					<label for="inputLatitude" class="control-label col-xs-3">Latitude</label>
					<div class="col-xs-9">
						<input type="text" class="form-control" id="inputLatitude" name="latitude" placeholder="Rational number in degrees, north-positive">
					</div>
				</div>
				<div class="form-group">
					<label for="inputLongitude" class="control-label col-xs-3">Longitude</label>
					<div class="col-xs-9">
						<input type="text" class="form-control" id="inputLongitude" name="longitude" placeholder="Rational number in degrees, east-positive">
					</div>
				</div>
				<div class="form-group">
					<label for="inputDepth" class="control-label col-xs-3">Depth</label>
					<div class="col-xs-9">
						<input type="text" class="form-control" id="inputDepth" name="depth" placeholder="Whole number in meters, positive numbers are below the water surface">
					</div>
				</div>
				<div class="form-group" id="inputTimeSeriesTypeGroup">
					<label for="inputTimeSeriesType" class="control-label col-xs-3">Time Series Type</label>
					<div class="col-xs-9">
						<div id="inputTimeSeriesType" style="margin-left: 20px;">
							<label class="radio">
								<input type="radio" name="timeSeriesType" value="scalar" checked="checked"> Scalar
							</label>
							<label class="radio">
								<input type="radio" id="inputTimeSeriesTypeADCP" name="timeSeriesType" value="adcp"> ADCP
							</label>
						</div>
					</div>
				</div>
				<div class="form-group">
					<label for="inputDataFile" class="control-label col-xs-3">CSV File</label>
					<div class="col-xs-9">
						<input type="file" id="inputDataFile" name="dataFile" style="margin-top: 5px;">
						<p class="help-block">
							The CSV file must be formatted according to the following rules:<br>
							1. The file must include a header containing the column names<br>
							2. The first column must be named <i>timestamp</i> and represent the time in seconds since the reference date you can specify below<br>
							3. The separator must be ','<br>
							4. Comment lines must start with a '#'<br>
							5. If the file is ADCP data, the first <i>n</i> data columns (after the <i>timestamp</i> column) must be named &quot;directionX&quot; and the second <i>n</i> data columns must be named &quot;magnitudeX&quot;, where <i>X</i> is the bin number in ascending order. For example:<br>
							<i>timestamp,direction1,direction2,direction3,magnitude1,magnitude2,magnitude3</i>
						</p>
						<div id="inputAutoConvert" style="margin-left: 20px;">
							<label class="checkbox">
								<input type="checkbox" name="autoConvert" value="autoConvert" checked="checked"> Convert time series automatically
							</label>
						</div>
					</div>
				</div>
				<div class="form-group">
					<label for="inputDate" class="control-label col-xs-3">Reference Date (UTC)</label>
					<div class="col-xs-9">
						<input type="text" class="form-control" id="inputDate" name="referenceDate" value="2012-06-01 00:00:01">
						<p class="help-block">Format: YYYY-MM-DD HH:MM:SS</p>
					</div>
				</div>
				<div class="form-group">
					<div class="col-xs-offset-3 col-xs-9">
						<button type="submit" class="btn btn-primary" id="buttonUpload">Upload</button> <span id="uploadCSVMessage" style="margin-left: 10px;"></span>
					</div>
				</div>
			</form>
		</div>
	</div>
</div>

<script type="text/javascript">
	$(document).ready(function() {
		$('input[name="timeSeriesType"]:radio').change(function() {
			if($("#inputTimeSeriesTypeADCP").prop("checked")) {
				$("#inputTimeSeriesTypeGroup").after('<div class="form-group" id="inputDirectionGroup">\
	<label for="inputDirection" class="control-label col-xs-3">ADCP Direction</label>\
	<div class="col-xs-9">\
		<div id="inputDirection" style="margin-left: 20px;">\
			<label class="radio">\
				<input type="radio" name="adcpDirection" value="up" checked="checked"> Up\
			</label>\
			<label class="radio">\
				<input type="radio" name="adcpDirection" value="down"> Down\
			</label>\
		</div>\
	</div>\
</div>\
<div class="form-group" id="inputFirstBinGroup">\
	<label for="inputFirstBin" class="control-label col-xs-3">First ADCP Bin Height</label>\
	<div class="col-xs-9">\
		<input type="text" class="form-control" id="inputFirstBinHeight" name="adcpFirstBinHeight" placeholder="Positive rational number in meters">\
	</div>\
</div>\
<div class="form-group" id="inputBinGroup">\
	<label for="inputBin" class="control-label col-xs-3">ADCP Bin Height</label>\
	<div class="col-xs-9">\
		<input type="text" class="form-control" id="inputBinHeight" name="adcpBinHeight" placeholder="Positive rational number in meters">\
	</div>\
</div>');
			}
			else {
				$("#inputDirectionGroup,#inputFirstBinGroup,#inputBinGroup").remove();
			}
		});
	});


	function updateStationSelectMenu() {
		$("#stationSelectMenuButton").prop("disabled", true);
		$("#stationSelectMenu").empty();
		$.ajax({
			url: "/stations",
			type: "GET",
			cache: false,
			headers: {
				"x-auth-token": "{{authToken}}"
			},
			success: function(retdata) {
				var keys = Object.getOwnPropertyNames(retdata);
				if(keys.length < 1) {
					return;
				}
				keys.forEach(function(name) {
					$("#stationSelectMenu").append('<li><a id="stationMenuEntryID'+name+'" href="#">'+name+'</a></li>');
					$("#stationMenuEntryID"+name).click(function() {
						$("#inputStation").val(name);
						$("#inputLatitude").val(retdata[name].lat);
						$("#inputLongitude").val(retdata[name].lon);
						$("#inputRegion").val(retdata[name].regionPrintName);
						$("#inputDevice").val(retdata[name].device);
					});
				});
				$("#stationSelectMenuButton").prop("disabled", false);
			},
			error: function() {
			}
		});

	}
	$(document).ready(updateStationSelectMenu);




	function dataUploadFormReenable(success, msg) {
		$("#uploadCSVMessage").empty()
			.append('<span class="fa fa-' +(success ? 'check' : 'times')+ '"></span> ' + msg)
			.css("color", success ? "green" : "red");
		$("#buttonUpload").empty().append('Upload');
		if(success) {
			$('#formCSVUpload :input[type=text][id!="inputDate"][id!="inputFirstBinHeight"][id!="inputBinHeight"]').prop("value", "");
			$("#inputDataFile").prop("value", "");
		}
		$("#formCSVUpload :input").prop("disabled", false);
	}
	$(document).ready(function() {
		$("#formCSVUpload").submit(function(event) {
			event.preventDefault();
			$("#formCSVUpload :input").prop("disabled", true);
			$("#uploadCSVMessage").empty();

			if($("#inputDataFile")[0].files.length != 1) {
				dataUploadFormReenable(false, "Select exactly one CSV data file to upload!");
				return;
			}
			// TODO: Further client-side validation

			$("#buttonUpload").empty().append('Uploading... <span class="fa fa-spinner fa-pulse"></span>');

			var formData = new FormData();
			$("#formCSVUpload :input[type=text]").each(function() {
				formData.append($(this).prop("name"), $(this).val());
			});
			if($('input:radio[name="adcpDirection"]').length > 0) {
				formData.append("adcpDirection", $('input:radio[name="adcpDirection"]:checked').val());
			}
			formData.append("timeSeriesType", $('input:radio[name="timeSeriesType"]:checked').val());
			formData.append("autoConvert", $('input:checkbox[name="autoConvert"]').is(":checked"));
			formData.append($("#inputDataFile").prop("name"), $("#inputDataFile")[0].files[0], "upload.csv");
			$.ajax({
				url: "/upload/"+($("#inputTimeSeriesTypeADCP").prop("checked") ? "adcp" : "scalar"),
				type: "POST",
				data: formData,
				cache: false,
				contentType: false,
				processData: false,
				headers: {
					"x-auth-token": "{{authToken}}"
				},
				success: function(retdata) {
					dataUploadFormReenable(retdata.success, retdata.message);
					updateDataTypesList();
					updateTimeSeriesList();
					updateStationSelectMenu();
					updateBathymRegionMenu();
				},
				error: function(xhr, textStatus, errorThrown) {
					if(xhr.hasOwnProperty("responseJSON")) {
						dataUploadFormReenable(xhr.responseJSON.success, xhr.responseJSON.message);
						return;
					}
					dataUploadFormReenable(false, "An error occured while uploading the file!");
				}
			});

			return false;
		});
	});
</script>




<div class="panel panel-default">
	<div class="panel-heading">Convert Time Series</div>
	<div class="panel-body">
		<button class="btn btn-primary" id="buttonConvert">Convert</button> <span id="convertTSMessage" style="margin-left: 10px;"></span>
	</div>
</div>

<script type="text/javascript">
	function setConvertMessageAndReenable(success, msg) {
		$("#convertTSMessage").empty()
			.append('<span class="fa fa-' +(success ? 'check' : 'times')+ '"></span> ' + msg)
			.css("color", success ? "green" : "red");
		$("#buttonConvert").prop("disabled", false)
			.empty()
			.append('Convert');
	}

	$(document).ready(function() {
		$("#buttonConvert").click(function() {
			$(this).prop("disabled", true)
				.empty()
				.append('<span class="fa fa-spinner fa-pulse"></span> Converting...');
			$("#convertTSMessage").empty();
			
			$.ajax({
				url: "/convert",
				type: "GET",
				cache: false,
				headers: {
					"x-auth-token": "{{authToken}}"
				},
				success: function(retdata) {
					setConvertMessageAndReenable(true, "Done");
					updateTimeSeriesList();
					updateDataTypesList();
				},
				error: function () {
					setConvertMessageAndReenable(false, "Error");
				}
			});
		});
	});
</script>




<div class="panel panel-default">
	<div class="panel-heading">Add Bathymetry Data</div>
	<div class="panel-body">
		<div class="container" style="max-width: 750px;">
			<form method="post" action="/upload" enctype="multipart/form-data" role="form" id="formBathymetryUpload" class="form-horizontal">
				<div class="form-group">
					<label for="inputBathymRegion" class="control-label col-xs-3">Region</label>
					<div class="col-xs-9">
						<select class="form-control" id="inputBathymRegion" name="region">
						</select>
					</div>
				</div>
				<div class="form-group">
					<label for="inputBathymFile" class="control-label col-xs-3">Grid File</label>
					<div class="col-xs-9">
						<input type="file" id="inputBathymFile" name="dataFile" style="margin-top: 5px;">
						<p class="help-block">
							The grid must be a NetCDF file with dimensions x (longitude) and y (latitude) as well as variabes x(x), y(y), and the elelvation z(y,x).
						</p>
					</div>
				</div>
				<div class="form-group">
					<div class="col-xs-offset-3 col-xs-9">
						<button type="submit" class="btn btn-primary" id="buttonBathymUpload">Upload</button> <span id="uploadBathymMessage" style="margin-left: 10px;"></span>
					</div>
				</div>
			</form>
		</div>
	</div>
</div>

<script type="text/javascript">
	function updateBathymRegionMenu() {
		$("#inputBathymRegion").prop("disabled", true);
		$("#inputBathymRegion").empty();
		$.ajax({
			url: "/regions",
			type: "GET",
			cache: false,
			headers: {
				"x-auth-token": "{{authToken}}"
			},
			success: function(retdata) {
				var keys = Object.getOwnPropertyNames(retdata);
				if(keys.length < 1) {
					return;
				}
				keys.forEach(function(r) {
					$("#inputBathymRegion").append('<option value="'+r+'">'+retdata[r].printName+'</option>');
				});
				$("#inputBathymRegion").prop("disabled", false);
			},
			error: function() {
			}
		});
	}
	$(document).ready(updateBathymRegionMenu);


	function bathymUploadFormReenable(success, msg) {
		$("#uploadBathymMessage").empty()
			.append('<span class="fa fa-' +(success ? 'check' : 'times')+ '"></span> ' + msg)
			.css("color", success ? "green" : "red");
		$("#buttonBathymUpload").empty().append('Upload');
		if(success) {
			$("#inputBathymFile").prop("value", "");
		}
		$("#formBathymetryUpload :input").prop("disabled", false);
	}
	$(document).ready(function() {
		$("#formBathymetryUpload").submit(function(event) {
			event.preventDefault();
			$("#formBathymetryUpload :input").prop("disabled", true);
			$("#uploadBathymMessage").empty();

			if($("#inputBathymFile")[0].files.length != 1) {
				bathymUploadFormReenable(false, "Select exactly one grid file to upload!");
				return;
			}

			$("#buttonBathymUpload").empty().append('Uploading... <span class="fa fa-spinner fa-pulse"></span>');

			var formData = new FormData();
			var region = $("#inputBathymRegion").val();
			formData.append("region", region);
			formData.append($("#inputBathymFile").prop("name"), $("#inputBathymFile")[0].files[0]);
			$.ajax({
				url: "/bathymetries/"+region,
				type: "POST",
				data: formData,
				cache: false,
				contentType: false,
				processData: false,
				headers: {
					"x-auth-token": "{{authToken}}"
				},
				success: function(retdata) {
					bathymUploadFormReenable(retdata.success, retdata.message);
					updateBathymetryTable();
				},
				error: function(xhr, textStatus, errorThrown) {
					if(xhr.hasOwnProperty("responseJSON")) {
						bathymUploadFormReenable(xhr.responseJSON.success, xhr.responseJSON.message);
						return;
					}
					bathymUploadFormReenable(false, "An error occured while uploading the file!");
				}
			});

			return false;
		});
	});
</script>




<div class="panel panel-default">
	<div class="panel-heading">Manage Bathymetry Data</div>
	<div class="panel-body">
		<table class="table-striped" id="bathymetryTable" style="min-width: 450px; margin: auto;">
			<tr id="bathymetryTableHeader" style="height: 3.5em;">
				<th class="oceanteaTableCell" style="padding-left: 20px;">Region</th>
				<th class="oceanteaTableCell" style="padding-right: 20px;"></th>
			</tr>
		</table>
	</div>
</div>

<script type="text/javascript">
	function clearBathymetryTable() {
		$("#bathymetryTable tr[id!='bathymetryTableHeader']").remove();
	}
	function addInformationRowToBathymetryTable(msg) {
		$("#bathymetryTable").append('<tr style="height: 3.5em;">\
	<td colspan="2" style="text-align: center;">'+msg+'</td>\
</tr>');
	}
	function setBathymetryTableResponse(id, success, msg) {
		$("#BatTMessageID"+id).empty()
			.append('<span class="fa fa-' +(success ? 'check' : 'times')+ '"></span> ' + msg)
			.css("color", success ? "green" : "red");
		$("#BatTBtnRemoveID"+id)
			.empty()
			.append('<span class="fa fa-trash"></span>')
			.prop("disabled", false);
	}
	function addToBathymetryTable(region) {
		var rID = region;
		$("#bathymetryTable").append('<tr style="height: 3.5em;" id="BatTRowID'+rID+'">\
	<td class="oceanteaTableCell" style="padding-left: 20px;">'+region+'</td>\
	<td class="oceanteaTableCell" style="padding-right: 20px;"><button class="btn btn-danger" id="BatTBtnRemoveID'+rID+'"><span class="fa fa-trash"></span></button> <span id="BatTMessageID'+rID+'" style="margin-left: 7px; white-space:nowrap;"></span></td>\
</tr>');
		$("#BatTBtnRemoveID"+rID).click(function() {
			$(this)
				.prop("disabled", true)
				.empty()
				.append('<span class="fa fa-spinner fa-pulse"></span>');
			$("#BatTMessageID"+rID).empty();
			$.ajax({
				url: "/bathymetries/"+region,
				type: "DELETE",
				cache: false,
				headers: {
					"x-auth-token": "{{authToken}}"
				},
				success: function(retdata) {
					if(retdata.success) {
						$("#BatTRowID"+rID).remove();
					}
					else {
						setBathymetryTableResponse(rID, false, "Error");
					}
				},
				error: function () {
					setBathymetryTableResponse(rID, false, "Error");
				}
			});
		});
	}
	function updateBathymetryTable() {
		clearBathymetryTable();
		addInformationRowToBathymetryTable('<span class="fa fa-spinner fa-pulse"></span> <b>Retrieving bathymetry data...</b>');
		$.ajax({
			url: "/bathymetries",
			type: "GET",
			cache: false,
			headers: {
				"x-auth-token": "{{authToken}}"
			},
			success: function(retdata) {
				clearBathymetryTable();
				if(!retdata.hasOwnProperty("regions") || retdata.regions.length < 1) {
					addInformationRowToBathymetryTable('<b>No bathymetry data.</b>');
					return;
				}
				retdata.regions.forEach(function(r) {
					addToBathymetryTable(r);
				});
			},
			error: function () {
				clearBathymetryTable();
				addInformationRowToTimeSeriesList('<b>An error occurred while retrieving the list of bathymetries.</b>');
			}
		});
	}
	$(document).ready(updateBathymetryTable);
</script>




<div class="panel panel-default">
	<div class="panel-heading">Manage Data Types</div>
	<div class="panel-body">
		<table class="table-striped" id="dataTypeTable" style="width: 800px; margin: auto;">
			<tr id="dataTypeTableHeader" style="height: 3.5em;">
				<th class="col-xs-3">CSV Field</th>
				<th class="col-xs-4">Print Name</th>
				<th class="col-xs-2">Unit</th>
				<th class="col-xs-3"></th>
			</tr>
		</table>
	</div>
</div>

<script type="text/javascript">
	function clearDataTypesList() {
		$("#dataTypeTable tr[id!='dataTypeTableHeader']").remove();
	}
	function addInformationRowToDataTypesList(msg) {
		$("#dataTypeTable").append('<tr style="height: 3.5em;">\
			<td class="col-xs-12" colspan="4" style="text-align: center;">'+msg+'</td>\
		</tr>');
	}
	function setDataTypeListResponse(id, success, msg) {
		$("#MDTmessageID"+id).empty()
			.append('<span class="fa fa-' +(success ? 'check' : 'times')+ '"></span> ' + msg)
			.css("color", success ? "green" : "red");
		$("#MDTdataTypeSubmitID"+id).empty().append('Set');
		$("#MDTrowID"+id+" :input").prop("disabled", false);
	}
	function addToDataTypesList(csvField, printName, unit) {
		$("#dataTypeTable").append('<tr style="height: 3.5em;" id="MDTrowID'+csvField+'">\
			<td class="col-xs-3">'+csvField+'</td>\
			<td class="col-xs-4"><input type="text" class="form-control" id="MDTprintNameID'+csvField+'" value="'+printName+'"></td>\
			<td class="col-xs-2"><input type="text" class="form-control" id="MDTunitID'+csvField+'" value="'+unit+'"></td>\
			<td class="col-xs-3"><button class="btn btn-primary" id="MDTdataTypeSubmitID'+csvField+'">Set</button> <span id="MDTmessageID'+csvField+'" style="margin-left: 7px; white-space:nowrap;"></span></td>\
		</tr>');
		$("#MDTdataTypeSubmitID"+csvField).click(function() {
			$("#MDTrowID"+csvField+" :input").prop("disabled", true);
			$("#MDTmessageID"+csvField).empty();
			$("#MDTdataTypeSubmitID"+csvField).empty().append('<span class="fa fa-spinner fa-pulse"></span>');
			$.ajax({
				url: "/datatypes/"+csvField+"?printName="+encodeURIComponent($("#MDTprintNameID"+csvField).val())+"&unit="+encodeURIComponent($("#MDTunitID"+csvField).val()),
				type: "PUT",
				cache: false,
				headers: {
					"x-auth-token": "{{authToken}}"
				},
				success: function(retdata) {
					if(retdata.success) {
						setDataTypeListResponse(csvField, true, "Done");
					}
					else {
						setDataTypeListResponse(csvField, false, "Error");
					}
				},
				error: function () {
					setDataTypeListResponse(csvField, false, "Error");
				}
			});
		});
	}
	function updateDataTypesList() {
		clearDataTypesList();
		addInformationRowToDataTypesList('<span class="fa fa-spinner fa-pulse"></span> <b>Retrieving known data types...</b>');
		$.ajax({
			url: "/datatypes",
			type: "GET",
			cache: false,
			headers: {
				"x-auth-token": "{{authToken}}"
			},
			success: function(retdata) {
				var keys = Object.getOwnPropertyNames(retdata);
				clearDataTypesList();
				if(keys.length < 1) {
					addInformationRowToDataTypesList('<b>No data types known so far.</b>');
					return;
				}
				keys.forEach(function(typeName) {
					addToDataTypesList(typeName, retdata[typeName].printName, retdata[typeName].unit);
				});
			},
			error: function () {
				clearDataTypesList();
				addInformationRowToDataTypesList('<b>An error occurred while retrieving the list of known data types.</b>');
			}
		});
	}

	$(document).ready(function() {
		updateDataTypesList();
	});
</script>




<div class="panel panel-default">
	<div class="panel-heading">Manage Time Series</div>
	<div class="panel-body">
		<table class="table-striped" id="timeSeriesTable" style="min-width: 900px; margin: auto;">
			<tr id="timeSeriesTableHeader" style="height: 3.5em;">
				<th class="oceanteaTableCell" style="padding-left: 20px;">Station</th>
				<th class="oceanteaTableCell">Region</th>
				<th class="oceanteaTableCell">Device</th>
				<th class="oceanteaTableCell">Lat</th>
				<th class="oceanteaTableCell">Lon</th>
				<th class="oceanteaTableCell">Depth</th>
				<th class="oceanteaTableCell">Series Type</th>
				<th class="oceanteaTableCell">Data Type</th>
				<th class="oceanteaTableCell">Reference Time</th>
				<th class="oceanteaTableCell" style="padding-right: 20px;"></th>
			</tr>
		</table>
	</div>
</div>

<script type="text/javascript">
	function isAlmostEqualLatLon(a, b) {
		return (Math.abs(b - a) < 1e-6);
	}
	function floatToStringLatLon(v) {
		return Math.round(v*10000)/10000;
	}
	function clearTimeSeriesList() {
		$("#timeSeriesTable tr[id!='timeSeriesTableHeader']").remove();
	}
	function addInformationRowToTimeSeriesList(msg) {
		$("#timeSeriesTable").append('<tr style="height: 3.5em;">\
			<td colspan="9" style="text-align: center;">'+msg+'</td>\
		</tr>');
	}
	function setTimeSeriesListResponse(id, success, msg) {
		$("#MTSmessageID"+id).empty()
			.append('<span class="fa fa-' +(success ? 'check' : 'times')+ '"></span> ' + msg)
			.css("color", success ? "green" : "red");
		$("#MTSbtnRemoveID"+id)
			.empty()
			.append('<span class="fa fa-trash"></span>')
			.prop("disabled", false);
	}
	function addToTimeSeriesList(ts, prevTS) {
		prevTS = prevTS || { };
		var tsID = ts.tsType+"-"+ts.station+"-"+ts.dataType+"-"+ts.depth;
		var sameStation = (prevTS.station===ts.station);
		$("#timeSeriesTable").append('<tr style="height: 3.5em;" id="MTSrowID'+tsID+'">\
			<td class="oceanteaTableCell" style="padding-left: 20px;">'+(sameStation ? '' : ts.station)+'</td>\
			<td class="oceanteaTableCell">'+(sameStation && prevTS.region===ts.region ? '' : ts.regionPrintName)+'</td>\
			<td class="oceanteaTableCell">'+(sameStation && prevTS.device===ts.device ? '' : ts.device)+'</td>\
			<td class="oceanteaTableCell">'+(sameStation && isAlmostEqualLatLon(prevTS.lat, ts.lat) ? '' : floatToStringLatLon(ts.lat))+'</td>\
			<td class="oceanteaTableCell">'+(sameStation && isAlmostEqualLatLon(prevTS.lon, ts.lon) ? '' : floatToStringLatLon(ts.lon))+'</td>\
			<td class="oceanteaTableCell">'+(sameStation && prevTS.depth===ts.depth ? '' : ts.depth)+'</td>\
			<td class="oceanteaTableCell">'+ts.tsType+'</td>\
			<td class="oceanteaTableCell">'+ts.dataType+'</td>\
			<td class="oceanteaTableCell">'+(sameStation &&prevTS.t_reference===ts.t_reference ? '' : ts.t_reference)+'</td>\
			<td class="oceanteaTableCell" style="padding-right: 20px;"><button class="btn btn-danger" id="MTSbtnRemoveID'+tsID+'"><span class="fa fa-trash"></span></button> <span id="MTSmessageID'+tsID+'" style="margin-left: 7px; white-space:nowrap;"></span></td>\
		</tr>');
		$("#MTSbtnRemoveID"+tsID).click(function() {
			$(this)
				.prop("disabled", true)
				.empty()
				.append('<span class="fa fa-spinner fa-pulse"></span>');
			$("#MTSmessageID"+tsID).empty();
			$.ajax({
				url: "/timeseries/"+ts.tsType+"/"+ts.station+"/"+ts.dataType+"/"+ts.depth,
				type: "DELETE",
				cache: false,
				headers: {
					"x-auth-token": "{{authToken}}"
				},
				success: function(retdata) {
					if(retdata.success) {
						//$("#MTSrowID"+tsID).remove();
						updateTimeSeriesList();
						updateDataTypesList();
						updateStationSelectMenu();
						updateBathymRegionMenu();
					}
					else {
						setTimeSeriesListResponse(tsID, false, "Error");
					}
				},
				error: function () {
					setTimeSeriesListResponse(tsID, false, "Error");
				}
			});
		});
	}
	function updateTimeSeriesList() {
		clearTimeSeriesList();
		addInformationRowToTimeSeriesList('<span class="fa fa-spinner fa-pulse"></span> <b>Retrieving time series...</b>');
		$.ajax({
			url: "/timeseries",
			type: "GET",
			cache: false,
			headers: {
				"x-auth-token": "{{authToken}}"
			},
			success: function(retdata) {
				clearTimeSeriesList();
				if(!retdata.hasOwnProperty("timeseries") || retdata.timeseries.length < 1) {
					addInformationRowToTimeSeriesList('<b>No time series data.</b>');
					return;
				}
				var prevTS = null
				retdata.timeseries.forEach(function(ts) {
					addToTimeSeriesList(ts, prevTS);
					prevTS = ts;
				});
			},
			error: function () {
				clearTimeSeriesList();
				addInformationRowToTimeSeriesList('<b>An error occurred while retrieving the list of time series.</b>');
			}
		});
	}

	$(document).ready(updateTimeSeriesList);
</script>
